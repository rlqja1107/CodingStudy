class Solution {
            //판별하는 깊이우선탐색 함수 설정.
            boolean[] dfsTree(int[][] computers, int i, boolean conn[]) {
        //컴퓨터 연결정보와 연결상태를 바탕으로
        //판단한다. / i 는 행을 위한 파라미터.
        conn[i] = true; //재귀용인것 같기는 한데, 일단 통과하여 함수가 작동된 것은 연결로 판단하고 true로 변경.
        for(int j=0;j<computers.length;j++){ //열의 크기==컴퓨터연결정보만큼 반복문을 돌린다?
            if(i!=j && computers[i][j]==1 && conn[j]==false) {
                //이 조건이 문제.
                //1. 자기 자신이 아니어야 하고 (그러면 말 그대로 연결이 아니게 됨. 차라리 떨어져서 카운트해야.)
                //2. 컴퓨터 2차원 배열의 연결정보가 1이다 == i번과 j번 컴퓨터가 연결이 되어 있다.
                //3. conn ection 배열 i의 위치 값이 아직 true 아닌경우( 더 탐색할 수 있다는 뜻.)
                
                conn = dfsTree(computers,j,conn);
                // ==> 그렇다면 자기 자신을 호출(재귀) 계속 돌린다!
            }
            
        }
            return conn;
    }
    
    public int solution(int n, int[][] computers) {
        int answer = 0;
        boolean[] conn = new boolean[n];
        //연결 여부를 판별한 배열 conn ection. 단 입력된 컴퓨터 개수 n개로 초기화.
        for(int i=0;i<n;i++){
            if(!conn[i]){ //연결이 false인 경우, 즉 연결 안되있다고 판별되면? ->
                dfsTree(computers,i,conn); //1. 판별 함수 실행한 다음.
                answer++; //2. 네트워크의 개수를 카운트한다.
            }
        }
        return answer;
    }
    
}
