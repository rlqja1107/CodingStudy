package BinarySearch;

import java.util.*;
public class Immigration_revised {
	public static long solution(int n,int times[]) {
		Arrays.sort(times);
		ArrayList<Long> available_number=new ArrayList<Long>();
		long high=n*(times[times.length-1]);
		long low=n*(times[0]);
		boolean flag=false;
		boolean flag2=true;
		while(flag2){
			long mid=(high+low)/2;
			int man_max_number=0;
			System.out.println(mid);
			for(int i=0;i<times.length;i++) {
				man_max_number+=(int)mid/times[i];
			}
			if(!flag) {
			if(man_max_number>=n) {
				high=high/2;
			}
			else {
				low=mid;			
			}
			available_number.add(mid);
			}
			
			if(man_max_number-n==1) {
				flag=true;
				high-=1;
				available_number.add(mid);
				System.out.println(mid);
				if(man_max_number-n==-1)flag2=false;
			}
			else if(n-man_max_number==1) {
				flag=true;
				low+=1;
				available_number.add(mid);
				if(man_max_number-n==1)flag2=false;
			}
			
		}
		Collections.sort(available_number);
		return available_number.get(0);
	}
	public static void main(String[] args) {
		int n=6;
		int time[]= {7,10};
		System.out.println(solution(n,time));

	}

}
