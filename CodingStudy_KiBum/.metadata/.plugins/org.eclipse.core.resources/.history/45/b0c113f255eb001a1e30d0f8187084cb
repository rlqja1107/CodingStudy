package BinarySearch;

import java.util.*;
public class Immigration_revised {
	public static long solution(int n,int times[]) {
		Arrays.sort(times);
		ArrayList<Long> available_number=new ArrayList<Long>();
		long high=n*(times[times.length-1]);
		long low=0;
		while(true){
			long mid=(high+low)/2;
			int man_max_number=0;
			for(int i=0;i<times.length;i++) {
				man_max_number+=(int)mid/times[i];
			}
			if(man_max_number>n) {
				high=mid-1;
			}
			else if(man_max_number<n){
				low=mid+1;
			}
			else {
				break;}
		}
		long answer=0;
		for(long i=low;i<=high;i++){
			int man_max=0;
			for(int j=0;j<times.length;j++) {
				man_max+=(int)i/times[j];
			}
			if(man_max==n) {
				break;
			}
			answer=i;
		}
		return answer+1;
	}
	public static void main(String[] args) {
		int n=6;
		int time[]= {7,10};
		System.out.println(solution(n,time));

	}

}
