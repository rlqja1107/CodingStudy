package BinarySearch;

import java.util.Arrays;
import java.util.Comparator;

public class Immigration{
	public static int find_shortline(int [][]times_sub,int standard_time){
		int min_time=1000;
		int index=0;
		for(int i=0;i<times_sub.length;i++){
			times_sub[i][0]+=times_sub[i][1];
			if(min_time>=times_sub[i][0]){
				min_time=times_sub[i][0];
				index=i;
			}
			times_sub[i][0]-=times_sub[i][1];
		}
		return index;
	}
	public static void decrease_time(int [][]time,int standard_time){
		for(int i=0;i<time.length;i++) {
			time[i][0]-=standard_time;
		}
	}
	public static long solution(int n,int []times){
		long time=0;
		int times_sub[][]=new int[times.length][2];
		for(int i=0;i<times.length;i++){
			times_sub[i][1]=times[i];
		}
		while(n<=0) {
			Arrays.sort(times_sub,new Comparator<int[]>(){
				@Override
				public int compare(int[] o1, int[] o2) {
					if(o1[0]>o2[0])return -1;
					else if(o1[0]<o2[0])return 1;
					else return 0;
				}
			});
			if(times_sub[0][0]<=0) {
				for(int i=0;i<times.length;i++){
					if(times_sub[i][0]<=0) {
					find_shortline(times_sub,times_sub[i][0]);
					}
					else break;
				}
			}
			else {
				time+=times_sub[0][0];
				decrease_time(times_sub,times_sub[0][0]);
			}

		}
	}
	public static void main(String[] args) {

	}

}
