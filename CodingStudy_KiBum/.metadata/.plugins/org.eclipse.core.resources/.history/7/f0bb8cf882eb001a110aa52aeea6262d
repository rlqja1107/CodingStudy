package Graph;
import java.util.*;
public class Ranking {
	//set에 standard의 목록들을 넣어주기
	public static void put_loose_ranking(HashMap<Integer,Set<Double>> map,int standard,Set<Double>set) {
		Set<Double>sub_set=map.get(standard);
		for(Double val:sub_set){
			double value=Math.round(val);
			if(val-value==0.1) {
				set.add(val);
				put_loose_ranking(map,(int)value,set);
			}
			
		}
	}
	public static void put_win_ranking(HashMap<Integer,Set<Double>> map,int standard,Set<Double>set) {
		Set<Double>sub_set=map.get(standard);
		for(Double val:sub_set) {
			double value=Math.round(val);
			if(val-value==-0.1){
				set.add(val);
				put_win_ranking(map,(int)value,set);
			}
		}
		
	}
	//이기면 int[1] 자리에 1,지면 int[1]자리에 0, int[0]에는 값(숫자)
	public static int solution(int n, int results[][]) {
		HashMap<Integer,Set<Double>> graph=new HashMap<Integer,Set<Double>>();
		for(int i=1;i<=n;i++) {
			graph.put(i,new HashSet<Double>());
		}
		for(int []val:results) {
			graph.get(val[0]).add(val[1]+0.1);
			graph.get(val[1]).add(val[0]-0.1);
		}
		for(int i=1;i<=n;i++){
			Set<Double> list=graph.get(i);
			for(double val:list){
				double value=Math.round(val);
				//연결되어있는 얘들한톄 진얘들을 넣어주기,
				if(val-value>0) {
					System.out.println("check");
					put_loose_ranking(graph,(int)value,list);
				}
				else {
					put_win_ranking(graph,(int)value,list);
				}
			}
			}
		int answer=0;
		for(int i=1;i<=n;i++) {
			if(graph.get(i).size()>=n-1)
				answer++;
			System.out.println(i+","+graph.get(i).size());
		}
		
		return answer;
		
	}
	public static void main(String[] args) {
		int n=5;
		int results[][]= {{4, 3}, {4, 2}, {3, 2}, {1, 2}, {2, 5}};
		System.out.println(solution(5,results));
	}}
